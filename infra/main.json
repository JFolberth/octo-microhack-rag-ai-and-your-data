{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "4038751215168224886"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Environment name used as a tag for all resources. This is directly mapped to the azd-environment."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Primary location for all resources."
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the resource group where all resources will be created. When empty, the name is autogenerated."
      }
    },
    "deploymentTags": {
      "type": "object",
      "metadata": {
        "description": "Key-value pairs of tags to assign to all resources. The default azd tags are automatically added."
      }
    },
    "provisionLoadTesting": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Disable load testing? If yes it will not create load testing resource."
      }
    },
    "azureReuseConfig": {
      "type": "object",
      "defaultValue": {}
    },
    "vmUserInitialPassword": {
      "type": "securestring",
      "minLength": 6,
      "maxLength": 72,
      "metadata": {
        "description": "Test vm gpt user password. Use strong password with letters and numbers. Needed only when choosing network isolation and create bastion option. If not creating with network isolation you can write anything. Password must be between 6-72 characters long and must satisfy at least 3 of password complexity requirements from the following: 1-Contains an uppercase character, 2-Contains a lowercase character, 3-Contains a numeric digit, 4-Contains a special character, 5- Control characters are not allowed."
      }
    },
    "deployVM": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Deploy VM? If yes it will create the virtual machine to access the network isolated environment in the zero trust configuration."
      }
    },
    "vmUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Test vm gpt user name. Needed only when choosing network isolation and create bastion option. If not you can leave it blank."
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "networkIsolation": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Network isolation? If yes it will create the private endpoints."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Virtual network name, you can leave as it is to generate a random name."
      }
    },
    "vnetAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address space for the virtual network"
      }
    },
    "aiSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the AI services subnet"
      }
    },
    "aiSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the AI services subnet"
      }
    },
    "bastionSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Bastion subnet"
      }
    },
    "bastionSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the Bastion subnet"
      }
    },
    "appIntSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the App Integration subnet"
      }
    },
    "appIntSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the App Integration subnet"
      }
    },
    "appServicesSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the App Services subnet"
      }
    },
    "appServicesSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the App Services subnet"
      }
    },
    "databaseSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Database subnet"
      }
    },
    "databaseSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the Database subnet"
      }
    },
    "searchTrimming": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Search Trimming? If yes it will add a variable in the orchestrator to filter files in AI Search query."
      }
    },
    "azureDbConfig": {
      "type": "object",
      "defaultValue": {}
    },
    "orchestratorMessagesLanguage": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Language used when orchestrator needs send error messages to the UX."
      }
    },
    "speechRecognitionLanguage": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Language used for speech recognition in the frontend."
      }
    },
    "speechSynthesisLanguage": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Language used for speech synthesis in the frontend."
      }
    },
    "speechSynthesisVoiceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Voice used for speech synthesis in the frontend."
      }
    },
    "funcAppRuntimeVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Python runtime version in function apps"
      }
    },
    "appServiceRuntimeVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Python runtime version in app service"
      }
    },
    "chatGptModelName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "GPT model used to answer user questions. Don't forget to check region availability."
      }
    },
    "chatGptModelDeploymentType": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "GPT model deployment type."
      }
    },
    "chatGptModelVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "GPT model version."
      }
    },
    "chatGptDeploymentName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "GPT model deployment name."
      }
    },
    "chatGptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "GPT model tokens per Minute Rate Limit (thousands)."
      }
    },
    "embeddingsModelName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Embeddings model used to generate vector embeddings. Don't forget to check region availability."
      }
    },
    "embeddingsModelVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Embeddings model version."
      }
    },
    "embeddingsDeploymentName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Embeddings model deployment name."
      }
    },
    "embeddingsDeploymentCapacity": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Embeddings model tokens per Minute Rate Limit (thousands)."
      }
    },
    "openaiApiVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure OpenAI API version."
      }
    },
    "chatGptLlmMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Enables LLM monitoring to generate conversation metrics."
      }
    },
    "retrievalApproach": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Orchestrator supports the following retrieval approaches: term, vector, hybrid(term + vector search), or use oyd feature of Azure OpenAI."
      }
    },
    "searchAnalyzerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Analyzer language used by Azure search to analyze indexes text content."
      }
    },
    "useSemanticReranking": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Use semantic reranking on top of search results?."
      }
    },
    "searchIndex": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Search index name."
      }
    },
    "searchApiVersion": {
      "type": "string",
      "defaultValue": ""
    },
    "searchIndexInterval": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Frequency of search reindexing. PT5M (5 min), PT1H (1 hour), P1D (1 day)."
      }
    },
    "searchUseMIS": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use Search Service Managed Identity to Connect to data ingestion function?"
      }
    },
    "chunkNumTokens": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The number of tokens in each chunk."
      }
    },
    "chunkMinSize": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The minimum chunk size below which chunks will be filtered."
      }
    },
    "chunkTokenOverlap": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The number of tokens to overlap between chunks."
      }
    },
    "storageContainerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the container where source documents will be stored."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Storage Account Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Key Vault Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "openAiServiceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OpenAI Service Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "aiServicesName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "AI services multi-service name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "App Service Plan Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "appInsightsName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "App Insights Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "appServiceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Front-end App Service Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "loadTestingName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Load testing resource name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "orchestratorFunctionAppName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Orchestrator Function Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "dataIngestionFunctionAppName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Data Ingestion Function Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "searchServiceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Search Service Name. Use your own name convention or leave as it is to generate a random name."
      }
    },
    "azureStorageAccountPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Storage Account Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureDbAccountPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Cosmos DB Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureKeyvaultPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Key Vault Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureOrchestratorPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Orchestrator Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureFrontendPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Frontend Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureDataIngestionPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Data Ingestion Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureAiServicesPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure AI Services Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureOpenAiPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure OpenAI Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "azureSearchPe": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Search Private Endpoint. If left empty, a random name will be generated."
      }
    },
    "vmKeyVaultSecName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the VM Key Vault Secret. If left empty, a random name will be generated."
      }
    },
    "ztVmName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Zero Trust VM. If left empty, a random name will be generated."
      }
    },
    "bastionKvName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Bastion Key Vault. If left empty, a random name will be generated."
      }
    }
  },
  "variables": {
    "_resourceGroupName": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('rg-{0}', parameters('environmentName')))]",
    "azdTags": {
      "azd-env-name": "[parameters('environmentName')]"
    },
    "tags": "[union(variables('azdTags'), parameters('deploymentTags'))]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "_provisionLoadTesting": "[parameters('provisionLoadTesting')]",
    "_azureReuseConfigDefaults": {
      "aoaiReuse": false,
      "existingAoaiResourceGroupName": "",
      "existingAoaiName": "",
      "appInsightsReuse": false,
      "existingAppInsightsResourceGroupName": "",
      "existingAppInsightsName": "",
      "appServicePlanReuse": false,
      "existingAppServicePlanResourceGroupName": "",
      "existingAppServicePlanName": "",
      "aiSearchReuse": false,
      "existingAiSearchResourceGroupName": "",
      "existingAiSearchName": "",
      "aiServicesReuse": false,
      "existingAiServicesResourceGroupName": "",
      "existingAiServicesName": "",
      "cosmosDbReuse": false,
      "existingCosmosDbResourceGroupName": "",
      "existingCosmosDbAccountName": "",
      "existingCosmosDbDatabaseName": "",
      "keyVaultReuse": false,
      "existingKeyVaultResourceGroupName": "",
      "existingKeyVaultName": "",
      "storageReuse": false,
      "existingAccountResourceGroupName": "",
      "existingStorageName": "",
      "vnetReuse": false,
      "existingVnetResourceGroupName": "",
      "existingVnetName": "",
      "orchestratorFunctionAppReuse": false,
      "existingOrchestratorFunctionAppResourceGroupName": "",
      "existingOrchestratorFunctionAppName": "",
      "dataIngestionFunctionAppReuse": false,
      "existingDataIngestionFunctionAppResourceGroupName": "",
      "existingDataIngestionFunctionAppName": "",
      "appServiceReuse": false,
      "existingAppServiceName": "",
      "existingAppServiceNameResourceGroupName": "",
      "orchestratorFunctionAppStorageReuse": false,
      "existingOrchestratorFunctionAppStorageName": "",
      "existingOrchestratorFunctionAppStorageResourceGroupName": "",
      "dataIngestionFunctionAppStorageReuse": false,
      "existingDataIngestionFunctionAppStorageName": "",
      "existingDataIngestionFunctionAppStorageResourceGroupName": ""
    },
    "_azureReuseConfig": "[union(variables('_azureReuseConfigDefaults'), createObject('aoaiReuse', if(empty(parameters('azureReuseConfig').aoaiReuse), variables('_azureReuseConfigDefaults').aoaiReuse, equals(toLower(parameters('azureReuseConfig').aoaiReuse), 'true')), 'existingAoaiResourceGroupName', if(empty(parameters('azureReuseConfig').existingAoaiResourceGroupName), variables('_azureReuseConfigDefaults').existingAoaiResourceGroupName, parameters('azureReuseConfig').existingAoaiResourceGroupName), 'existingAoaiName', if(empty(parameters('azureReuseConfig').existingAoaiName), variables('_azureReuseConfigDefaults').existingAoaiName, parameters('azureReuseConfig').existingAoaiName), 'aiServicesReuse', if(empty(parameters('azureReuseConfig').aiServicesReuse), variables('_azureReuseConfigDefaults').aiServicesReuse, equals(toLower(parameters('azureReuseConfig').aiServicesReuse), 'true')), 'existingAiServicesResourceGroupName', if(empty(parameters('azureReuseConfig').existingAiServicesResourceGroupName), variables('_azureReuseConfigDefaults').existingAiServicesResourceGroupName, parameters('azureReuseConfig').existingAiServicesResourceGroupName), 'existingAiServicesName', if(empty(parameters('azureReuseConfig').existingAiServicesName), variables('_azureReuseConfigDefaults').existingAiServicesName, parameters('azureReuseConfig').existingAiServicesName), 'appInsightsReuse', if(empty(parameters('azureReuseConfig').appInsightsReuse), variables('_azureReuseConfigDefaults').appInsightsReuse, equals(toLower(parameters('azureReuseConfig').appInsightsReuse), 'true')), 'existingAppInsightsResourceGroupName', if(empty(parameters('azureReuseConfig').existingAppInsightsResourceGroupName), variables('_azureReuseConfigDefaults').existingAppInsightsResourceGroupName, parameters('azureReuseConfig').existingAppInsightsResourceGroupName), 'existingAppInsightsName', if(empty(parameters('azureReuseConfig').existingAppInsightsName), variables('_azureReuseConfigDefaults').existingAppInsightsName, parameters('azureReuseConfig').existingAppInsightsName), 'appServicePlanReuse', if(empty(parameters('azureReuseConfig').appServicePlanReuse), variables('_azureReuseConfigDefaults').appServicePlanReuse, equals(toLower(parameters('azureReuseConfig').appServicePlanReuse), 'true')), 'existingAppServicePlanResourceGroupName', if(empty(parameters('azureReuseConfig').existingAppServicePlanResourceGroupName), variables('_azureReuseConfigDefaults').existingAppServicePlanResourceGroupName, parameters('azureReuseConfig').existingAppServicePlanResourceGroupName), 'existingAppServicePlanName', if(empty(parameters('azureReuseConfig').existingAppServicePlanName), variables('_azureReuseConfigDefaults').existingAppServicePlanName, parameters('azureReuseConfig').existingAppServicePlanName), 'aiSearchReuse', if(empty(parameters('azureReuseConfig').aiSearchReuse), variables('_azureReuseConfigDefaults').aiSearchReuse, equals(toLower(parameters('azureReuseConfig').aiSearchReuse), 'true')), 'existingAiSearchResourceGroupName', if(empty(parameters('azureReuseConfig').existingAiSearchResourceGroupName), variables('_azureReuseConfigDefaults').existingAiSearchResourceGroupName, parameters('azureReuseConfig').existingAiSearchResourceGroupName), 'existingAiSearchName', if(empty(parameters('azureReuseConfig').existingAiSearchName), variables('_azureReuseConfigDefaults').existingAiSearchName, parameters('azureReuseConfig').existingAiSearchName), 'cosmosDbReuse', if(empty(parameters('azureReuseConfig').cosmosDbReuse), variables('_azureReuseConfigDefaults').cosmosDbReuse, equals(toLower(parameters('azureReuseConfig').cosmosDbReuse), 'true')), 'existingCosmosDbResourceGroupName', if(empty(parameters('azureReuseConfig').existingCosmosDbResourceGroupName), variables('_azureReuseConfigDefaults').existingCosmosDbResourceGroupName, parameters('azureReuseConfig').existingCosmosDbResourceGroupName), 'existingCosmosDbAccountName', if(empty(parameters('azureReuseConfig').existingCosmosDbAccountName), variables('_azureReuseConfigDefaults').existingCosmosDbAccountName, parameters('azureReuseConfig').existingCosmosDbAccountName), 'existingCosmosDbDatabaseName', if(empty(parameters('azureReuseConfig').existingCosmosDbDatabaseName), variables('_azureReuseConfigDefaults').existingCosmosDbDatabaseName, parameters('azureReuseConfig').existingCosmosDbDatabaseName), 'keyVaultReuse', if(empty(parameters('azureReuseConfig').keyVaultReuse), variables('_azureReuseConfigDefaults').keyVaultReuse, equals(toLower(parameters('azureReuseConfig').keyVaultReuse), 'true')), 'existingKeyVaultResourceGroupName', if(empty(parameters('azureReuseConfig').existingKeyVaultResourceGroupName), variables('_azureReuseConfigDefaults').existingKeyVaultResourceGroupName, parameters('azureReuseConfig').existingKeyVaultResourceGroupName), 'existingKeyVaultName', if(empty(parameters('azureReuseConfig').existingKeyVaultName), variables('_azureReuseConfigDefaults').existingKeyVaultName, parameters('azureReuseConfig').existingKeyVaultName), 'storageReuse', if(empty(parameters('azureReuseConfig').storageReuse), variables('_azureReuseConfigDefaults').storageReuse, equals(toLower(parameters('azureReuseConfig').storageReuse), 'true')), 'existingAccountResourceGroupName', if(empty(parameters('azureReuseConfig').existingAccountResourceGroupName), variables('_azureReuseConfigDefaults').existingAccountResourceGroupName, parameters('azureReuseConfig').existingAccountResourceGroupName), 'existingStorageName', if(empty(parameters('azureReuseConfig').existingStorageName), variables('_azureReuseConfigDefaults').existingStorageName, parameters('azureReuseConfig').existingStorageName), 'vnetReuse', if(empty(parameters('azureReuseConfig').vnetReuse), variables('_azureReuseConfigDefaults').vnetReuse, equals(toLower(parameters('azureReuseConfig').vnetReuse), 'true')), 'existingVnetResourceGroupName', if(empty(parameters('azureReuseConfig').existingVnetResourceGroupName), variables('_azureReuseConfigDefaults').existingVnetResourceGroupName, parameters('azureReuseConfig').existingVnetResourceGroupName), 'existingVnetName', if(empty(parameters('azureReuseConfig').existingVnetName), variables('_azureReuseConfigDefaults').existingVnetName, parameters('azureReuseConfig').existingVnetName), 'orchestratorFunctionAppReuse', if(empty(parameters('azureReuseConfig').orchestratorFunctionAppReuse), variables('_azureReuseConfigDefaults').orchestratorFunctionAppReuse, equals(toLower(parameters('azureReuseConfig').orchestratorFunctionAppReuse), 'true')), 'existingOrchestratorFunctionAppResourceGroupName', if(empty(parameters('azureReuseConfig').existingOrchestratorFunctionAppResourceGroupName), variables('_azureReuseConfigDefaults').existingOrchestratorFunctionAppResourceGroupName, parameters('azureReuseConfig').existingOrchestratorFunctionAppResourceGroupName), 'existingOrchestratorFunctionAppName', if(empty(parameters('azureReuseConfig').existingOrchestratorFunctionAppName), variables('_azureReuseConfigDefaults').existingOrchestratorFunctionAppName, parameters('azureReuseConfig').existingOrchestratorFunctionAppName), 'dataIngestionFunctionAppReuse', if(empty(parameters('azureReuseConfig').dataIngestionFunctionAppReuse), variables('_azureReuseConfigDefaults').dataIngestionFunctionAppReuse, equals(toLower(parameters('azureReuseConfig').dataIngestionFunctionAppReuse), 'true')), 'existingDataIngestionFunctionAppResourceGroupName', if(empty(parameters('azureReuseConfig').existingDataIngestionFunctionAppResourceGroupName), variables('_azureReuseConfigDefaults').existingDataIngestionFunctionAppResourceGroupName, parameters('azureReuseConfig').existingDataIngestionFunctionAppResourceGroupName), 'existingDataIngestionFunctionAppName', if(empty(parameters('azureReuseConfig').existingDataIngestionFunctionAppName), variables('_azureReuseConfigDefaults').existingDataIngestionFunctionAppName, parameters('azureReuseConfig').existingDataIngestionFunctionAppName), 'appServiceReuse', if(empty(parameters('azureReuseConfig').appServiceReuse), variables('_azureReuseConfigDefaults').appServiceReuse, equals(toLower(parameters('azureReuseConfig').appServiceReuse), 'true')), 'existingAppServiceName', if(empty(parameters('azureReuseConfig').existingAppServiceName), variables('_azureReuseConfigDefaults').existingAppServiceName, parameters('azureReuseConfig').existingAppServiceName), 'existingAppServiceNameResourceGroupName', if(empty(parameters('azureReuseConfig').existingAppServiceNameResourceGroupName), variables('_azureReuseConfigDefaults').existingAppServiceNameResourceGroupName, parameters('azureReuseConfig').existingAppServiceNameResourceGroupName), 'orchestratorFunctionAppStorageReuse', if(empty(parameters('azureReuseConfig').orchestratorFunctionAppStorageReuse), variables('_azureReuseConfigDefaults').orchestratorFunctionAppStorageReuse, equals(toLower(parameters('azureReuseConfig').orchestratorFunctionAppStorageReuse), 'true')), 'existingOrchestratorFunctionAppStorageName', if(empty(parameters('azureReuseConfig').existingOrchestratorFunctionAppStorageName), variables('_azureReuseConfigDefaults').existingOrchestratorFunctionAppStorageName, parameters('azureReuseConfig').existingOrchestratorFunctionAppStorageName), 'existingOrchestratorFunctionAppStorageResourceGroupName', if(empty(parameters('azureReuseConfig').existingOrchestratorFunctionAppStorageResourceGroupName), variables('_azureReuseConfigDefaults').existingOrchestratorFunctionAppStorageResourceGroupName, parameters('azureReuseConfig').existingOrchestratorFunctionAppStorageResourceGroupName), 'dataIngestionFunctionAppStorageReuse', if(empty(parameters('azureReuseConfig').dataIngestionFunctionAppStorageReuse), variables('_azureReuseConfigDefaults').dataIngestionFunctionAppStorageReuse, equals(toLower(parameters('azureReuseConfig').dataIngestionFunctionAppStorageReuse), 'true')), 'existingDataIngestionFunctionAppStorageName', if(empty(parameters('azureReuseConfig').existingDataIngestionFunctionAppStorageName), variables('_azureReuseConfigDefaults').existingDataIngestionFunctionAppStorageName, parameters('azureReuseConfig').existingDataIngestionFunctionAppStorageName), 'existingDataIngestionFunctionAppStorageResourceGroupName', if(empty(parameters('azureReuseConfig').existingDataIngestionFunctionAppStorageResourceGroupName), variables('_azureReuseConfigDefaults').existingDataIngestionFunctionAppStorageResourceGroupName, parameters('azureReuseConfig').existingDataIngestionFunctionAppStorageResourceGroupName)))]",
    "_deployVM": "[parameters('deployVM')]",
    "_vmUserName": "[if(not(empty(parameters('vmUserName'))), parameters('vmUserName'), 'gptrag')]",
    "_networkIsolation": "[parameters('networkIsolation')]",
    "_vnetName": "[if(variables('_azureReuseConfig').vnetReuse, variables('_azureReuseConfig').existingVnetName, if(not(empty(parameters('vnetName'))), parameters('vnetName'), format('aivnet0-{0}', variables('resourceToken'))))]",
    "_vnetAddress": "[if(not(empty(parameters('vnetAddress'))), parameters('vnetAddress'), '10.0.0.0/23')]",
    "_aiSubnetName": "[if(not(empty(parameters('aiSubnetName'))), parameters('aiSubnetName'), 'ai-subnet')]",
    "_aiSubnetPrefix": "[if(not(empty(parameters('aiSubnetPrefix'))), parameters('aiSubnetPrefix'), '10.0.0.0/26')]",
    "_bastionSubnetName": "[if(not(empty(parameters('bastionSubnetName'))), parameters('bastionSubnetName'), 'AzureBastionSubnet')]",
    "_bastionSubnetPrefix": "[if(not(empty(parameters('bastionSubnetPrefix'))), parameters('bastionSubnetPrefix'), '10.0.0.64/26')]",
    "_appIntSubnetName": "[if(not(empty(parameters('appIntSubnetName'))), parameters('appIntSubnetName'), 'app-int-subnet')]",
    "_appIntSubnetPrefix": "[if(not(empty(parameters('appIntSubnetPrefix'))), parameters('appIntSubnetPrefix'), '10.0.0.128/26')]",
    "_appServicesSubnetName": "[if(not(empty(parameters('appServicesSubnetName'))), parameters('appServicesSubnetName'), 'app-services-subnet')]",
    "_appServicesSubnetPrefix": "[if(not(empty(parameters('appServicesSubnetPrefix'))), parameters('appServicesSubnetPrefix'), '10.0.0.192/26')]",
    "_databaseSubnetName": "[if(not(empty(parameters('databaseSubnetName'))), parameters('databaseSubnetName'), 'database-subnet')]",
    "_databaseSubnetPrefix": "[if(not(empty(parameters('databaseSubnetPrefix'))), parameters('databaseSubnetPrefix'), '10.0.1.0/26')]",
    "_vnetReuse": "[variables('_azureReuseConfig').vnetReuse]",
    "_searchTrimming": "[parameters('searchTrimming')]",
    "_azureDbConfigDefaults": {
      "dbAccountName": "[format('dbgpt0-{0}', variables('resourceToken'))]",
      "dbDatabaseName": "[format('db0-{0}', variables('resourceToken'))]",
      "conversationContainerName": "conversations",
      "modelsContainerName": "models"
    },
    "_azureDbConfig": "[union(variables('_azureDbConfigDefaults'), createObject('dbAccountName', if(empty(parameters('azureDbConfig').dbAccountName), variables('_azureDbConfigDefaults').dbAccountName, parameters('azureDbConfig').dbAccountName), 'dbDatabaseName', if(empty(parameters('azureDbConfig').dbDatabaseName), variables('_azureDbConfigDefaults').dbDatabaseName, parameters('azureDbConfig').dbDatabaseName), 'conversationContainerName', if(empty(parameters('azureDbConfig').conversationContainerName), variables('_azureDbConfigDefaults').conversationContainerName, parameters('azureDbConfig').conversationContainerName), 'modelsContainerName', if(empty(parameters('azureDbConfig').modelsContainerName), variables('_azureDbConfigDefaults').modelsContainerName, parameters('azureDbConfig').modelsContainerName)))]",
    "_orchestratorMessagesLanguage": "[if(not(empty(parameters('orchestratorMessagesLanguage'))), parameters('orchestratorMessagesLanguage'), 'en')]",
    "_speechRecognitionLanguage": "[if(not(empty(parameters('speechRecognitionLanguage'))), parameters('speechRecognitionLanguage'), 'en-US')]",
    "_speechSynthesisLanguage": "[if(not(empty(parameters('speechSynthesisLanguage'))), parameters('speechSynthesisLanguage'), 'en-US')]",
    "_speechSynthesisVoiceName": "[if(not(empty(parameters('speechSynthesisVoiceName'))), parameters('speechSynthesisVoiceName'), 'en-US-RyanMultilingualNeural')]",
    "_funcAppRuntimeVersion": "[if(not(empty(parameters('funcAppRuntimeVersion'))), parameters('funcAppRuntimeVersion'), '3.11')]",
    "_appServiceRuntimeVersion": "[if(not(empty(parameters('appServiceRuntimeVersion'))), parameters('appServiceRuntimeVersion'), '3.12')]",
    "_chatGptModelName": "[if(not(empty(parameters('chatGptModelName'))), parameters('chatGptModelName'), 'gpt-4o')]",
    "_chatGptModelDeploymentType": "[if(not(empty(parameters('chatGptModelDeploymentType'))), parameters('chatGptModelDeploymentType'), 'Standard')]",
    "_chatGptModelVersion": "[if(not(empty(parameters('chatGptModelVersion'))), parameters('chatGptModelVersion'), '2024-05-13')]",
    "_chatGptDeploymentName": "[if(not(empty(parameters('chatGptDeploymentName'))), parameters('chatGptDeploymentName'), 'chat')]",
    "_chatGptDeploymentCapacity": "[if(not(equals(parameters('chatGptDeploymentCapacity'), 0)), parameters('chatGptDeploymentCapacity'), 40)]",
    "_embeddingsModelName": "[if(not(empty(parameters('embeddingsModelName'))), parameters('embeddingsModelName'), 'text-embedding-ada-002')]",
    "_embeddingsModelVersion": "[if(not(empty(parameters('embeddingsModelVersion'))), parameters('embeddingsModelVersion'), '2')]",
    "_embeddingsDeploymentName": "[if(not(empty(parameters('embeddingsDeploymentName'))), parameters('embeddingsDeploymentName'), 'text-embedding-ada-002')]",
    "_embeddingsDeploymentCapacity": "[if(not(equals(parameters('embeddingsDeploymentCapacity'), 0)), parameters('embeddingsDeploymentCapacity'), 40)]",
    "_openaiApiVersion": "[if(not(empty(parameters('openaiApiVersion'))), parameters('openaiApiVersion'), '2024-07-01-preview')]",
    "_chatGptLlmMonitoring": "[if(not(equals(parameters('chatGptLlmMonitoring'), null())), parameters('chatGptLlmMonitoring'), true())]",
    "_docintApiVersion": "[if(or(or(or(equals(parameters('location'), 'eastus'), equals(parameters('location'), 'westus2')), equals(parameters('location'), 'westeurope')), equals(parameters('location'), 'northcentralus')), '2024-07-31-preview', '2023-07-31')]",
    "_retrievalApproach": "[if(not(empty(parameters('retrievalApproach'))), parameters('retrievalApproach'), 'hybrid')]",
    "_searchAnalyzerName": "[if(not(empty(parameters('searchAnalyzerName'))), parameters('searchAnalyzerName'), 'standard')]",
    "_useSemanticReranking": "[if(not(equals(parameters('useSemanticReranking'), null())), parameters('useSemanticReranking'), true())]",
    "_searchServiceSkuName": "[if(variables('_networkIsolation'), 'standard2', 'standard')]",
    "_searchIndex": "[if(not(empty(parameters('searchIndex'))), parameters('searchIndex'), 'ragindex')]",
    "_searchApiVersion": "[if(not(empty(parameters('searchApiVersion'))), parameters('searchApiVersion'), '2024-07-01')]",
    "_searchIndexInterval": "[if(not(empty(parameters('searchIndexInterval'))), parameters('searchIndexInterval'), 'PT1H')]",
    "_azureSearchUseMIS": "[if(not(equals(parameters('searchUseMIS'), null())), parameters('searchUseMIS'), false())]",
    "_chunkNumTokens": "[if(not(empty(parameters('chunkNumTokens'))), parameters('chunkNumTokens'), '2048')]",
    "_chunkMinSize": "[if(not(empty(parameters('chunkMinSize'))), parameters('chunkMinSize'), '100')]",
    "_chunkTokenOverlap": "[if(not(empty(parameters('chunkTokenOverlap'))), parameters('chunkTokenOverlap'), '200')]",
    "_storageContainerName": "[if(not(empty(parameters('storageContainerName'))), parameters('storageContainerName'), 'documents')]",
    "_storageImagesContainerName": "[format('{0}-images', variables('_storageContainerName'))]",
    "_storageAccountName": "[if(variables('_azureReuseConfig').storageReuse, variables('_azureReuseConfig').existingStorageName, if(not(empty(parameters('storageAccountName'))), parameters('storageAccountName'), format('strag0{0}', variables('resourceToken'))))]",
    "_keyVaultName": "[if(variables('_azureReuseConfig').keyVaultReuse, variables('_azureReuseConfig').existingKeyVaultName, if(not(empty(parameters('keyVaultName'))), parameters('keyVaultName'), format('kv0-{0}', variables('resourceToken'))))]",
    "_openAiServiceName": "[if(variables('_azureReuseConfig').aoaiReuse, variables('_azureReuseConfig').existingAoaiName, if(not(empty(parameters('openAiServiceName'))), parameters('openAiServiceName'), format('oai0-{0}', variables('resourceToken'))))]",
    "_aiServicesName": "[if(variables('_azureReuseConfig').aiServicesReuse, variables('_azureReuseConfig').existingAiServicesName, if(not(empty(parameters('aiServicesName'))), parameters('aiServicesName'), format('ai0-{0}', variables('resourceToken'))))]",
    "_appServicePlanName": "[if(variables('_azureReuseConfig').appServicePlanReuse, variables('_azureReuseConfig').existingAppServicePlanName, if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), format('appplan0-{0}', variables('resourceToken'))))]",
    "_appInsightsName": "[if(variables('_azureReuseConfig').appInsightsReuse, variables('_azureReuseConfig').existingAppInsightsName, if(not(empty(parameters('appInsightsName'))), parameters('appInsightsName'), format('appins0-{0}', variables('resourceToken'))))]",
    "_appServiceName": "[if(variables('_azureReuseConfig').appServiceReuse, variables('_azureReuseConfig').existingAppServiceName, if(not(empty(parameters('appServiceName'))), parameters('appServiceName'), format('webgpt0-{0}', variables('resourceToken'))))]",
    "_loadtestingName": "[if(not(empty(parameters('loadTestingName'))), parameters('loadTestingName'), format('loadtest0-{0}', variables('resourceToken')))]",
    "_orchestratorFunctionAppName": "[if(variables('_azureReuseConfig').orchestratorFunctionAppReuse, variables('_azureReuseConfig').existingOrchestratorFunctionAppName, if(not(empty(parameters('orchestratorFunctionAppName'))), parameters('orchestratorFunctionAppName'), format('fnorch0-{0}', variables('resourceToken'))))]",
    "_dataIngestionFunctionAppName": "[if(variables('_azureReuseConfig').dataIngestionFunctionAppReuse, variables('_azureReuseConfig').existingDataIngestionFunctionAppName, if(not(empty(parameters('dataIngestionFunctionAppName'))), parameters('dataIngestionFunctionAppName'), format('fninges0-{0}', variables('resourceToken'))))]",
    "_searchServiceName": "[if(variables('_azureReuseConfig').aiSearchReuse, variables('_azureReuseConfig').existingAiSearchName, if(not(empty(parameters('searchServiceName'))), parameters('searchServiceName'), format('search0-{0}', variables('resourceToken'))))]",
    "_azureStorageAccountPe": "[if(not(empty(parameters('azureStorageAccountPe'))), parameters('azureStorageAccountPe'), format('stragpe0-{0}', variables('resourceToken')))]",
    "_azureDbAccountPe": "[if(not(empty(parameters('azureDbAccountPe'))), parameters('azureDbAccountPe'), format('dbgptpe0-{0}', variables('resourceToken')))]",
    "_azureKeyvaultPe": "[if(not(empty(parameters('azureKeyvaultPe'))), parameters('azureKeyvaultPe'), format('kvpe0-{0}', variables('resourceToken')))]",
    "_azureOrchestratorPe": "[if(not(empty(parameters('azureOrchestratorPe'))), parameters('azureOrchestratorPe'), format('orchestratorPe-{0}', variables('resourceToken')))]",
    "_azureFrontendPe": "[if(not(empty(parameters('azureFrontendPe'))), parameters('azureFrontendPe'), format('frontendPe-{0}', variables('resourceToken')))]",
    "_azureDataIngestionPe": "[if(not(empty(parameters('azureDataIngestionPe'))), parameters('azureDataIngestionPe'), format('ingestionPe-{0}', variables('resourceToken')))]",
    "_azureAiServicesPe": "[if(not(empty(parameters('azureAiServicesPe'))), parameters('azureAiServicesPe'), format('aiServicesPe-{0}', variables('resourceToken')))]",
    "_azureOpenAiPe": "[if(not(empty(parameters('azureOpenAiPe'))), parameters('azureOpenAiPe'), format('openAiPe-{0}', variables('resourceToken')))]",
    "_azureSearchPe": "[if(not(empty(parameters('azureSearchPe'))), parameters('azureSearchPe'), format('searchPe-{0}', variables('resourceToken')))]",
    "_vmKeyVaultSecName": "[if(not(empty(parameters('vmKeyVaultSecName'))), parameters('vmKeyVaultSecName'), 'vmUserInitialPassword')]",
    "_ztVmName": "[if(not(empty(parameters('ztVmName'))), parameters('ztVmName'), format('testvm-{0}', variables('resourceToken')))]",
    "_bastionKvName": "[if(not(empty(parameters('bastionKvName'))), parameters('bastionKvName'), format('bastionkv-{0}', variables('resourceToken')))]",
    "_orchestratorEndpoint": "[format('https://{0}.azurewebsites.net/api/orc', variables('_orchestratorFunctionAppName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('_resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "condition": "[variables('_networkIsolation')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "virtual-network",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[variables('_vnetName')]"
          },
          "vnetReuse": {
            "value": "[variables('_vnetReuse')]"
          },
          "existingVnetResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingVnetResourceGroupName]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "vnetAddress": {
            "value": "[variables('_vnetAddress')]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "appServicePlanName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.name.value]"
          },
          "aiSubnetName": {
            "value": "[variables('_aiSubnetName')]"
          },
          "aiSubnetPrefix": {
            "value": "[variables('_aiSubnetPrefix')]"
          },
          "appIntSubnetName": {
            "value": "[variables('_appIntSubnetName')]"
          },
          "appIntSubnetPrefix": {
            "value": "[variables('_appIntSubnetPrefix')]"
          },
          "appServicesSubnetName": {
            "value": "[variables('_appServicesSubnetName')]"
          },
          "appServicesSubnetPrefix": {
            "value": "[variables('_appServicesSubnetPrefix')]"
          },
          "databaseSubnetName": {
            "value": "[variables('_databaseSubnetName')]"
          },
          "databaseSubnetPrefix": {
            "value": "[variables('_databaseSubnetPrefix')]"
          },
          "bastionSubnetName": {
            "value": "[variables('_bastionSubnetName')]"
          },
          "bastionSubnetPrefix": {
            "value": "[variables('_bastionSubnetPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "12497505445880061984"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "aiSubnetName": {
              "type": "string"
            },
            "appIntSubnetName": {
              "type": "string"
            },
            "appServicesSubnetName": {
              "type": "string"
            },
            "databaseSubnetName": {
              "type": "string"
            },
            "bastionSubnetName": {
              "type": "string"
            },
            "vnetAddress": {
              "type": "string",
              "defaultValue": "10.0.0.0/23"
            },
            "aiSubnetPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/26"
            },
            "appIntSubnetPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.128/26"
            },
            "appServicesSubnetPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.192/26"
            },
            "databaseSubnetPrefix": {
              "type": "string",
              "defaultValue": "10.0.1.0/26"
            },
            "bastionSubnetPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.64/26"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "appServicePlanName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "vnetReuse": {
              "type": "bool"
            },
            "existingVnetResourceGroupName": {
              "type": "string"
            },
            "aiNsgName": {
              "type": "string",
              "defaultValue": "ai-nsg"
            },
            "appIntNsgName": {
              "type": "string",
              "defaultValue": "appInt-nsg"
            },
            "appServicesNsgName": {
              "type": "string",
              "defaultValue": "appServices-nsg"
            },
            "databaseNsgName": {
              "type": "string",
              "defaultValue": "database-nsg"
            },
            "bastionNsgName": {
              "type": "string",
              "defaultValue": "bastion-nsg"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('aiNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('appIntNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('appServicesNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('databaseNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('bastionNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowHttpsInbound",
                    "properties": {
                      "priority": 100,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "Internet",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "AllowGatewayManagerInbound",
                    "properties": {
                      "priority": 120,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "GatewayManager",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "AllowLoadBalancerInbound",
                    "properties": {
                      "priority": 110,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "AllowBastionHostCommunicationInBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowSshRdpOutBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationPortRanges": [
                        "22",
                        "3389"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowAzureCloudCommunicationOutBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "AzureCloud",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowBastionHostCommunicationOutBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowGetSessionInformationOutBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Internet",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ],
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[not(parameters('vnetReuse'))]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddress')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[parameters('aiSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('aiSubnetPrefix')]",
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('aiNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[parameters('appServicesSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('appServicesSubnetPrefix')]",
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('appServicesNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[parameters('databaseSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('databaseSubnetPrefix')]",
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('databaseNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[parameters('bastionSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('bastionSubnetPrefix')]",
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[parameters('appIntSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('appIntSubnetPrefix')]",
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "delegations": [
                        {
                          "id": "[parameters('appServicePlanId')]",
                          "name": "[parameters('appServicePlanName')]",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverFarms"
                          }
                        }
                      ],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('appIntNsgName'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('aiNsgName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('appIntNsgName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('appServicesNsgName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNsgName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('databaseNsgName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[if(parameters('vnetReuse'), parameters('vnetName'), parameters('vnetName'))]"
            },
            "id": {
              "type": "string",
              "value": "[if(parameters('vnetReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingVnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')))]"
            },
            "aiSubId": {
              "type": "string",
              "value": "[if(parameters('vnetReuse'), resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('aiSubnetName')), reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2020-11-01').subnets[0].id)]"
            },
            "appServicesSubId": {
              "type": "string",
              "value": "[if(parameters('vnetReuse'), resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('appServicesSubnetName')), reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2020-11-01').subnets[1].id)]"
            },
            "databaseSubId": {
              "type": "string",
              "value": "[if(parameters('vnetReuse'), resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('databaseSubnetName')), reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2020-11-01').subnets[2].id)]"
            },
            "bastionSubId": {
              "type": "string",
              "value": "[if(parameters('vnetReuse'), resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('bastionSubnetName')), reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2020-11-01').subnets[3].id)]"
            },
            "appIntSubId": {
              "type": "string",
              "value": "[if(parameters('vnetReuse'), resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('appIntSubnetName')), reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2020-11-01').subnets[4].id)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "blob-dnzones",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "privatelink.blob.core.windows.net"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11407488047813614844"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('{0}-dnslink', parameters('virtualNetworkName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('dnsZoneName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "documents-dnzones",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "privatelink.documents.azure.com"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11407488047813614844"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('{0}-dnslink', parameters('virtualNetworkName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('dnsZoneName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vault-dnzones",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "privatelink.vaultcore.azure.net"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11407488047813614844"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('{0}-dnslink', parameters('virtualNetworkName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('dnsZoneName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "websites-dnzones",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "privatelink.azurewebsites.net"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11407488047813614844"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('{0}-dnslink', parameters('virtualNetworkName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('dnsZoneName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aiservices-dnzones",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "privatelink.cognitiveservices.azure.com"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11407488047813614844"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('{0}-dnslink', parameters('virtualNetworkName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('dnsZoneName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-dnzones",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "privatelink.openai.azure.com"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11407488047813614844"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('{0}-dnslink', parameters('virtualNetworkName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('dnsZoneName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "searchs-dnzones",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsZoneName": {
            "value": "privatelink.search.windows.net"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11407488047813614844"
            }
          },
          "parameters": {
            "dnsZoneName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('{0}-dnslink', parameters('virtualNetworkName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneName": {
              "type": "string",
              "value": "[parameters('dnsZoneName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('dnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), variables('_deployVM'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "testvm",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_ztVmName')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.aiSubId.value), createObject('value', ''))]",
          "bastionSubId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.bastionSubId.value), createObject('value', ''))]",
          "vmUserPassword": {
            "value": "[parameters('vmUserInitialPassword')]"
          },
          "vmUserName": {
            "value": "[variables('_vmUserName')]"
          },
          "keyVaultName": {
            "value": "[variables('_bastionKvName')]"
          },
          "vmUserPasswordKey": {
            "value": "[variables('_vmKeyVaultSecName')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "13358577056020536741"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "subnetId": {
              "type": "string"
            },
            "bastionSubId": {
              "type": "string"
            },
            "vmUserPassword": {
              "type": "securestring"
            },
            "vmUserName": {
              "type": "string"
            },
            "authenticationType": {
              "type": "string",
              "defaultValue": "password"
            },
            "vmUserPasswordKey": {
              "type": "securestring"
            },
            "keyVaultName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "vmSize": {
              "CPU-4GB": "Standard_B2s",
              "CPU-7GB": "Standard_D2s_v3",
              "CPU-8GB": "Standard_D2s_v3",
              "CPU-14GB": "Standard_D4s_v3",
              "CPU-16GB": "Standard_D4s_v3",
              "GPU-56GB": "Standard_NC6_Promo"
            },
            "publicIpName": "[format('{0}PublicIp', parameters('name'))]",
            "nicName": "[format('{0}Nic', parameters('name'))]",
            "diskName": "[format('{0}Disk', parameters('name'))]",
            "bastionName": "[format('{0}Bastion', parameters('name'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vmUserName'))]",
                    "keyData": "[parameters('vmUserPassword')]"
                  }
                ]
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-05-01",
              "name": "[variables('publicIpName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static"
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-06-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[variables('vmSize')['CPU-16GB']]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "microsoft-dsvm",
                    "offer": "dsvm-win-2019",
                    "sku": "winserver-2019",
                    "version": "latest"
                  },
                  "osDisk": {
                    "name": "[variables('diskName')]",
                    "createOption": "FromImage"
                  }
                },
                "osProfile": {
                  "computerName": "gptragvm",
                  "adminUsername": "[parameters('vmUserName')]",
                  "adminPassword": "[parameters('vmUserPassword')]",
                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2023-04-01",
              "name": "[variables('bastionName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('bastionSubId')]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, 'Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-03-01', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-06-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "standard",
                  "family": "A"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [],
                "enableRbacAuthorization": true
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('vmUserPasswordKey'))]",
              "properties": {
                "value": "[parameters('vmUserPassword')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Key Vault Secrets Officer')]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "vmPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-03-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_storageAccountName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageReuse": {
            "value": "[variables('_azureReuseConfig').storageReuse]"
          },
          "existingStorageResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingAccountResourceGroupName]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "publicNetworkAccess": "[if(variables('_networkIsolation'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "allowBlobPublicAccess": {
            "value": false
          },
          "containers": {
            "value": [
              {
                "name": "[variables('_storageContainerName')]",
                "publicAccess": "None"
              },
              {
                "name": "[variables('_storageImagesContainerName')]",
                "publicAccess": "None"
              }
            ]
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "secretName": {
            "value": "storageConnectionString"
          },
          "deleteRetentionPolicy": {
            "value": {
              "enabled": true,
              "days": 7
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4559284154091442999"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "existingStorageResourceGroupName": {
              "type": "string"
            },
            "storageReuse": {
              "type": "bool"
            },
            "deployStorageAccount": {
              "type": "bool",
              "defaultValue": true
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Hot",
                "Cool",
                "Premium"
              ]
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": true
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": false
            },
            "deleteRetentionPolicy": {
              "type": "object",
              "defaultValue": {}
            },
            "dnsEndpointType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "AzureDnsZone",
                "Standard"
              ]
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard_LRS"
              }
            },
            "secretName": {
              "type": "string",
              "defaultValue": "storageConnectionString"
            },
            "keyVaultName": {
              "type": "string"
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "copy": {
                "name": "newStorage::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(and(not(parameters('storageReuse')), parameters('deployStorageAccount')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), parameters('containers')[copyIndex()].publicAccess, 'None')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('name'), 'default')]"
              ]
            },
            {
              "condition": "[and(and(not(parameters('storageReuse')), parameters('deployStorageAccount')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": "[parameters('deleteRetentionPolicy')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(not(parameters('storageReuse')), parameters('deployStorageAccount'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "accessTier": "[parameters('accessTier')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                "dnsEndpointType": "[parameters('dnsEndpointType')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": true,
                  "exp": 0,
                  "nbf": 0
                },
                "contentType": "string",
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('name'), if(not(parameters('deployStorageAccount')), '', if(parameters('storageReuse'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('name')), '2022-05-01').keys[0].value, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-05-01').keys[0].value)))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[if(not(parameters('deployStorageAccount')), '', if(parameters('storageReuse'), parameters('name'), parameters('name')))]"
            },
            "id": {
              "type": "string",
              "value": "[if(not(parameters('deployStorageAccount')), '', if(parameters('storageReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('name')), resourceId('Microsoft.Storage/storageAccounts', parameters('name'))))]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[if(not(parameters('deployStorageAccount')), createObject(), if(parameters('storageReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('name')), '2022-05-01').primaryEndpoints, reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-05-01').primaryEndpoints))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storagepe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureStorageAccountPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.aiSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "blob"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'blob-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'blob-dnzones')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'storage')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosaccount",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[variables('_azureDbConfig').dbAccountName]"
          },
          "cosmosDbReuse": {
            "value": "[variables('_azureReuseConfig').cosmosDbReuse]"
          },
          "existingCosmosDbResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingCosmosDbResourceGroupName]"
          },
          "existingCosmosDbAccountName": {
            "value": "[variables('_azureReuseConfig').existingCosmosDbAccountName]"
          },
          "publicNetworkAccess": "[if(variables('_networkIsolation'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "conversationContainerName": {
            "value": "[variables('_azureDbConfig').conversationContainerName]"
          },
          "modelsContainerName": {
            "value": "[variables('_azureDbConfig').modelsContainerName]"
          },
          "databaseName": {
            "value": "[variables('_azureDbConfig').dbDatabaseName]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "secretName": {
            "value": "azureDBkey"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "5775839152873236060"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "Cosmos DB account name, max length 44 characters, lowercase"
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "metadata": {
                "description": "Enable/disable public network access for the Cosmos DB account."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Cosmos DB account."
              }
            },
            "cosmosDbReuse": {
              "type": "bool"
            },
            "existingCosmosDbResourceGroupName": {
              "type": "string"
            },
            "existingCosmosDbAccountName": {
              "type": "string"
            },
            "deployCosmosDb": {
              "type": "bool",
              "defaultValue": true
            },
            "conversationContainerName": {
              "type": "string"
            },
            "modelsContainerName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "defaultConsistencyLevel": {
              "type": "string",
              "defaultValue": "Session",
              "allowedValues": [
                "Eventual",
                "ConsistentPrefix",
                "Session",
                "BoundedStaleness",
                "Strong"
              ],
              "metadata": {
                "description": "The default consistency level of the Cosmos DB account."
              }
            },
            "maxStalenessPrefix": {
              "type": "int",
              "defaultValue": 100000,
              "minValue": 10,
              "maxValue": 2147483647,
              "metadata": {
                "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647."
              }
            },
            "maxIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300,
              "minValue": 5,
              "maxValue": 86400,
              "metadata": {
                "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
              }
            },
            "systemManagedFailover": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable system managed failover for regions"
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "The name for the database"
              }
            },
            "autoscaleMaxThroughput": {
              "type": "int",
              "defaultValue": 1000,
              "minValue": 1000,
              "maxValue": 1000000,
              "metadata": {
                "description": "Maximum autoscale throughput for the container"
              }
            },
            "analyticalStoreTTL": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "maxValue": 2147483647,
              "metadata": {
                "description": "Time to Live for data in analytical store. (-1 no expiry)"
              }
            },
            "secretName": {
              "type": "string",
              "defaultValue": "azureDBkey"
            },
            "keyVaultName": {
              "type": "string"
            }
          },
          "variables": {
            "consistencyPolicy": {
              "Eventual": {
                "defaultConsistencyLevel": "Eventual"
              },
              "ConsistentPrefix": {
                "defaultConsistencyLevel": "ConsistentPrefix"
              },
              "Session": {
                "defaultConsistencyLevel": "Session"
              },
              "BoundedStaleness": {
                "defaultConsistencyLevel": "BoundedStaleness",
                "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
                "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
              },
              "Strong": {
                "defaultConsistencyLevel": "Strong"
              }
            },
            "locations": [
              {
                "locationName": "[parameters('location')]",
                "failoverPriority": 0,
                "isZoneRedundant": false
              }
            ]
          },
          "resources": [
            {
              "condition": "[and(not(parameters('cosmosDbReuse')), parameters('deployCosmosDb'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-05-15",
              "name": "[toLower(parameters('accountName'))]",
              "kind": "GlobalDocumentDB",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
                "locations": "[variables('locations')]",
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": "[parameters('systemManagedFailover')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "enableAnalyticalStorage": true
              }
            },
            {
              "condition": "[and(not(parameters('cosmosDbReuse')), parameters('deployCosmosDb'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            },
            {
              "condition": "[and(not(parameters('cosmosDbReuse')), parameters('deployCosmosDb'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', toLower(parameters('accountName')), parameters('databaseName'), parameters('conversationContainerName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('conversationContainerName')]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  },
                  "analyticalStorageTtl": "[parameters('analyticalStoreTTL')]",
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ]
                  },
                  "defaultTtl": 86400
                },
                "options": {
                  "autoscaleSettings": {
                    "maxThroughput": "[parameters('autoscaleMaxThroughput')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[and(not(parameters('cosmosDbReuse')), parameters('deployCosmosDb'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', toLower(parameters('accountName')), parameters('databaseName'), parameters('modelsContainerName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('modelsContainerName')]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  },
                  "analyticalStorageTtl": "[parameters('analyticalStoreTTL')]",
                  "indexingPolicy": {
                    "indexingMode": "none",
                    "automatic": false
                  }
                },
                "options": {
                  "autoscaleSettings": {
                    "maxThroughput": "[parameters('autoscaleMaxThroughput')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": true,
                  "exp": 0,
                  "nbf": 0
                },
                "contentType": "string",
                "value": "[if(not(parameters('deployCosmosDb')), '', if(parameters('cosmosDbReuse'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingCosmosDbResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('existingCosmosDbAccountName')), '2022-05-15').primaryMasterKey, listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName'))), '2022-05-15').primaryMasterKey))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(not(parameters('deployCosmosDb')), '', if(parameters('cosmosDbReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingCosmosDbResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('existingCosmosDbAccountName')), resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))))]"
            },
            "name": {
              "type": "string",
              "value": "[if(not(parameters('deployCosmosDb')), '', if(parameters('cosmosDbReuse'), parameters('existingCosmosDbAccountName'), toLower(parameters('accountName'))))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmospe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureDbAccountPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.databaseSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'cosmosaccount'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "Sql"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'documents-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'cosmosaccount')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'documents-dnzones')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvault",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_keyVaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "keyVaultReuse": {
            "value": "[variables('_azureReuseConfig').keyVaultReuse]"
          },
          "existingKeyVaultResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingKeyVaultResourceGroupName]"
          },
          "publicNetworkAccess": "[if(variables('_networkIsolation'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "tags": {
            "value": "[variables('tags')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "6883465046972668342"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "publicNetworkAccess": {
              "type": "string"
            },
            "keyVaultReuse": {
              "type": "bool"
            },
            "existingKeyVaultResourceGroupName": {
              "type": "string"
            },
            "principalId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('keyVaultReuse'))]",
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "enableSoftDelete": true,
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "enablePurgeProtection": true,
                "accessPolicies": "[if(not(empty(parameters('principalId'))), createArray(createObject('objectId', parameters('principalId'), 'permissions', createObject('secrets', createArray('get', 'list', 'set')), 'tenantId', subscription().tenantId)), createArray())]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(parameters('keyVaultReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingKeyVaultResourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('name')), resourceId('Microsoft.KeyVault/vaults', parameters('name')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(parameters('keyVaultReuse'), parameters('name'), parameters('name'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(parameters('keyVaultReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingKeyVaultResourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01').vaultUri, reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01').vaultUri)]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvaultpe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureKeyvaultPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.aiSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "Vault"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'vault-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'vault-dnzones')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appserviceplan",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_appServicePlanName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "appServicePlanReuse": {
            "value": "[variables('_azureReuseConfig').appServicePlanReuse]"
          },
          "existingAppServicePlanResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingAppServicePlanResourceGroupName]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "B3",
              "capacity": 1
            }
          },
          "kind": {
            "value": "linux"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17526622513781375415"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "appServicePlanReuse": {
              "type": "bool"
            },
            "existingAppServicePlanResourceGroupName": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": ""
            },
            "reserved": {
              "type": "bool",
              "defaultValue": true
            },
            "sku": {
              "type": "object"
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('appServicePlanReuse'))]",
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[parameters('reserved')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(parameters('appServicePlanReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAppServicePlanResourceGroupName')), 'Microsoft.Web/serverfarms', parameters('name')), resourceId('Microsoft.Web/serverfarms', parameters('name')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(parameters('appServicePlanReuse'), parameters('name'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appinsights",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[variables('_appInsightsName')]"
          },
          "appInsightsLocation": {
            "value": "[parameters('location')]"
          },
          "appInsightsReuse": {
            "value": "[variables('_azureReuseConfig').appInsightsReuse]"
          },
          "existingAppInsightsResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingAppInsightsResourceGroupName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "14154392197197221185"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string"
            },
            "appInsightsLocation": {
              "type": "string"
            },
            "appInsightsReuse": {
              "type": "bool"
            },
            "existingAppInsightsResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('appInsightsReuse'))]",
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('appInsightsLocation')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(parameters('appInsightsReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAppInsightsResourceGroupName')), 'Microsoft.Insights/components', parameters('applicationInsightsName')), resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')))]"
            },
            "instrumentationKey": {
              "type": "string",
              "value": "[if(parameters('appInsightsReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAppInsightsResourceGroupName')), 'Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').InstrumentationKey, reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').InstrumentationKey)]"
            },
            "connectionString": {
              "type": "string",
              "value": "[if(parameters('appInsightsReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAppInsightsResourceGroupName')), 'Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString, reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString)]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "orchestrator",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "networkIsolation": {
            "value": "[variables('_networkIsolation')]"
          },
          "vnetName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]",
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.appIntSubId.value), createObject('value', ''))]",
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "storageAccountName": {
            "value": "[format('{0}orc', variables('_storageAccountName'))]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "appName": {
            "value": "[variables('_orchestratorFunctionAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "functionAppReuse": {
            "value": "[variables('_azureReuseConfig').orchestratorFunctionAppReuse]"
          },
          "existingFunctionAppResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingOrchestratorFunctionAppResourceGroupName]"
          },
          "functionAppStorageReuse": {
            "value": "[variables('_azureReuseConfig').orchestratorFunctionAppStorageReuse]"
          },
          "existingFunctionAppStorageName": {
            "value": "[variables('_azureReuseConfig').existingOrchestratorFunctionAppStorageName]"
          },
          "existingFunctionAppStorageResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingOrchestratorFunctionAppStorageResourceGroupName]"
          },
          "appInsightsConnectionString": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appinsights'), '2022-09-01').outputs.connectionString.value]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appinsights'), '2022-09-01').outputs.instrumentationKey.value]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'orchestrator'))]"
          },
          "alwaysOn": {
            "value": true
          },
          "functionAppScaleLimit": {
            "value": 2
          },
          "numberOfWorkers": {
            "value": 2
          },
          "runtimeName": {
            "value": "python"
          },
          "runtimeVersion": {
            "value": "[variables('_funcAppRuntimeVersion')]"
          },
          "minimumElasticInstanceCount": {
            "value": 1
          },
          "allowedOrigins": {
            "value": [
              "*"
            ]
          },
          "appSettings": {
            "value": [
              {
                "name": "AZURE_DB_ID",
                "value": "[variables('_azureDbConfig').dbAccountName]"
              },
              {
                "name": "AZURE_DB_NAME",
                "value": "[variables('_azureDbConfig').dbDatabaseName]"
              },
              {
                "name": "AZURE_DB_CONVERSATIONS_CONTAINER_NAME",
                "value": "[variables('_azureDbConfig').conversationContainerName]"
              },
              {
                "name": "AZURE_DB_MODELS_CONTAINER_NAME",
                "value": "[variables('_azureDbConfig').modelsContainerName]"
              },
              {
                "name": "AZURE_KEY_VAULT_NAME",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
              },
              {
                "name": "AZURE_SEARCH_SERVICE",
                "value": "[variables('_searchServiceName')]"
              },
              {
                "name": "AZURE_SEARCH_INDEX",
                "value": "[variables('_searchIndex')]"
              },
              {
                "name": "AZURE_SEARCH_APPROACH",
                "value": "[variables('_retrievalApproach')]"
              },
              {
                "name": "AZURE_SEARCH_USE_SEMANTIC",
                "value": "[variables('_useSemanticReranking')]"
              },
              {
                "name": "AZURE_SEARCH_API_VERSION",
                "value": "[variables('_searchApiVersion')]"
              },
              {
                "name": "AZURE_SEARCH_TRIMMING",
                "value": "[variables('_searchTrimming')]"
              },
              {
                "name": "AZURE_OPENAI_RESOURCE",
                "value": "[variables('_openAiServiceName')]"
              },
              {
                "name": "AZURE_OPENAI_CHATGPT_MODEL",
                "value": "[variables('_chatGptModelName')]"
              },
              {
                "name": "AZURE_OPENAI_CHATGPT_DEPLOYMENT",
                "value": "[variables('_chatGptDeploymentName')]"
              },
              {
                "name": "AZURE_OPENAI_CHATGPT_LLM_MONITORING",
                "value": "[variables('_chatGptLlmMonitoring')]"
              },
              {
                "name": "AZURE_OPENAI_API_VERSION",
                "value": "[variables('_openaiApiVersion')]"
              },
              {
                "name": "AZURE_OPENAI_LOAD_BALANCING",
                "value": false
              },
              {
                "name": "AZURE_OPENAI_EMBEDDING_MODEL",
                "value": "[variables('_embeddingsModelName')]"
              },
              {
                "name": "AZURE_OPENAI_EMBEDDING_DEPLOYMENT",
                "value": "[variables('_embeddingsDeploymentName')]"
              },
              {
                "name": "AZURE_OPENAI_STREAM",
                "value": false
              },
              {
                "name": "ORCHESTRATOR_MESSAGES_LANGUAGE",
                "value": "[variables('_orchestratorMessagesLanguage')]"
              },
              {
                "name": "ENABLE_ORYX_BUILD",
                "value": "true"
              },
              {
                "name": "BING_SEARCH_TOP_K",
                "value": "3"
              },
              {
                "name": "BING_RETRIEVAL",
                "value": "false"
              },
              {
                "name": "BING_SEARCH_MAX_TOKENS",
                "value": "1000"
              },
              {
                "name": "SQL_RETRIEVAL",
                "value": "false"
              },
              {
                "name": "SQL_TOP_K",
                "value": "3"
              },
              {
                "name": "SQL_MAX_TOKENS",
                "value": "1000"
              },
              {
                "name": "TERADATA_TOP_K",
                "value": "3"
              },
              {
                "name": "TERADATA_RETRIEVAL",
                "value": "false"
              },
              {
                "name": "TERADATA_MAX_TOKENS",
                "value": "1000"
              },
              {
                "name": "RETRIEVAL_PRIORITY",
                "value": "search"
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "true"
              },
              {
                "name": "LOGLEVEL",
                "value": "INFO"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17087624977064705334"
            }
          },
          "parameters": {
            "appName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "storageAccountName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "appSettings": {
              "type": "array"
            },
            "appInsightsConnectionString": {
              "type": "string"
            },
            "appInsightsInstrumentationKey": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "appCommandLine": {
              "type": "string",
              "defaultValue": ""
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "kind": {
              "type": "string",
              "defaultValue": "functionapp,linux"
            },
            "functionAppScaleLimit": {
              "type": "int",
              "defaultValue": -1
            },
            "minimumElasticInstanceCount": {
              "type": "int",
              "defaultValue": -1
            },
            "numberOfWorkers": {
              "type": "int",
              "defaultValue": -1
            },
            "runtimeName": {
              "type": "string"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "defaultValue": false
            },
            "healthCheckPath": {
              "type": "string",
              "defaultValue": ""
            },
            "networkIsolation": {
              "type": "bool"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "functionAppReuse": {
              "type": "bool"
            },
            "deployFunctionApp": {
              "type": "bool",
              "defaultValue": true
            },
            "existingFunctionAppResourceGroupName": {
              "type": "string"
            },
            "functionAppStorageReuse": {
              "type": "bool"
            },
            "existingFunctionAppStorageName": {
              "type": "string"
            },
            "existingFunctionAppStorageResourceGroupName": {
              "type": "string"
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "runtime": {
              "type": "string",
              "defaultValue": "python",
              "allowedValues": [
                "python"
              ],
              "metadata": {
                "description": "The language worker runtime to load in the function app."
              }
            }
          },
          "variables": {
            "runtimeNameAndVersion": "[format('{0}|{1}', parameters('runtimeName'), parameters('runtimeVersion'))]",
            "functionAppName": "[parameters('appName')]",
            "functionWorkerRuntime": "[parameters('runtime')]",
            "_storageAccountName": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppStorageReuse'), parameters('existingFunctionAppStorageName'), parameters('storageAccountName')))]"
          },
          "resources": [
            {
              "condition": "[and(not(parameters('functionAppStorageReuse')), parameters('deployFunctionApp'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "Storage",
              "properties": {
                "allowBlobPublicAccess": false,
                "supportsHttpsTrafficOnly": true,
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": true
              }
            },
            {
              "condition": "[and(not(parameters('functionAppReuse')), parameters('deployFunctionApp'))]",
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-09-01",
              "name": "[variables('functionAppName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "virtualNetworkSubnetId": "[if(parameters('networkIsolation'), parameters('subnetId'), null())]",
                "httpsOnly": true,
                "siteConfig": {
                  "vnetName": "[if(parameters('networkIsolation'), parameters('vnetName'), null())]",
                  "linuxFxVersion": "[variables('runtimeNameAndVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "FtpsOnly",
                  "minTlsVersion": "1.2",
                  "appCommandLine": "[parameters('appCommandLine')]",
                  "numberOfWorkers": "[parameters('numberOfWorkers')]",
                  "minimumElasticInstanceCount": "[parameters('minimumElasticInstanceCount')]",
                  "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
                  "functionAppScaleLimit": "[parameters('functionAppScaleLimit')]",
                  "healthCheckPath": "[parameters('healthCheckPath')]",
                  "appSettings": "[concat(parameters('appSettings'), createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('_storageAccountName'), environment().suffixes.storage, if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppStorageReuse'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('existingFunctionAppStorageName')), '2022-05-01').keys[0].value, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-05-01').keys[0].value)))), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', parameters('appInsightsConnectionString')), createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', parameters('appInsightsInstrumentationKey')), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', variables('functionWorkerRuntime')), createObject('name', 'AZURE_KEY_VAULT_ENDPOINT', 'value', reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri)))]",
                  "cors": {
                    "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').identity.principalId, reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').identity.principalId))]"
            },
            "name": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), variables('functionAppName'), variables('functionAppName')))]"
            },
            "uri": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', format('https://{0}', if(parameters('functionAppReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), '2022-09-01').defaultHostName, reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01').defaultHostName)))]"
            },
            "location": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').location, reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').location))]"
            },
            "id": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), resourceId('Microsoft.Web/sites', variables('functionAppName'))))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appinsights')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "orchestratorPe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureOrchestratorPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.appServicesSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "sites"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'websites-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'websites-dnzones')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "orchestrator-keyvault-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "9678702271087321593"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "add"
            },
            "keyVaultName": {
              "type": "string"
            },
            "permissions": {
              "type": "object",
              "defaultValue": {
                "secrets": [
                  "get",
                  "list",
                  "set",
                  "delete"
                ]
              }
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('principalId')]",
                    "tenantId": "[subscription().tenantId]",
                    "permissions": "[parameters('permissions')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "orchestrator-cosmos-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "accountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'cosmosaccount'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "5640713600398003177"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "accountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', toLower(parameters('accountName')), guid(resourceGroup().id, resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName'))), parameters('principalId')))]",
              "properties": {
                "roleDefinitionId": "[format('/{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}/sqlRoleDefinitions/00000000-0000-0000-0000-000000000002', subscription().id, resourceGroup().name, toLower(parameters('accountName')))]",
                "principalId": "[parameters('principalId')]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'cosmosaccount')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "orchestrator-openai-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "openaiAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "818130939760042958"
            }
          },
          "parameters": {
            "openaiAccountName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openaiAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiAccountName')), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "frontend",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_appServiceName')]"
          },
          "applicationInsightsName": "[if(variables('_azureReuseConfig').appInsightsReuse, createObject('value', variables('_azureReuseConfig').existingAppInsightsName), createObject('value', variables('_appInsightsName')))]",
          "applicationInsightsResourceGroupName": "[if(variables('_azureReuseConfig').appInsightsReuse, createObject('value', variables('_azureReuseConfig').existingAppInsightsResourceGroupName), createObject('value', variables('_resourceGroupName')))]",
          "appServiceReuse": {
            "value": "[variables('_azureReuseConfig').appServiceReuse]"
          },
          "existingAppServiceNameResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingAppServiceNameResourceGroupName]"
          },
          "networkIsolation": {
            "value": "[variables('_networkIsolation')]"
          },
          "vnetName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]",
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.appIntSubId.value), createObject('value', ''))]",
          "appCommandLine": {
            "value": "python ./app.py"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'frontend'))]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "runtimeName": {
            "value": "python"
          },
          "runtimeVersion": {
            "value": "[variables('_appServiceRuntimeVersion')]"
          },
          "scmDoBuildDuringDeployment": {
            "value": true
          },
          "basicPublishingCredentials": "[if(variables('_networkIsolation'), createObject('value', true()), createObject('value', false()))]",
          "appSettings": {
            "value": [
              {
                "name": "SPEECH_SYNTHESIS_VOICE_NAME",
                "value": "[variables('_speechSynthesisVoiceName')]"
              },
              {
                "name": "SPEECH_SYNTHESIS_LANGUAGE",
                "value": "[variables('_speechSynthesisLanguage')]"
              },
              {
                "name": "SPEECH_RECOGNITION_LANGUAGE",
                "value": "[variables('_speechRecognitionLanguage')]"
              },
              {
                "name": "SPEECH_REGION",
                "value": "[parameters('location')]"
              },
              {
                "name": "ORCHESTRATOR_ENDPOINT",
                "value": "[variables('_orchestratorEndpoint')]"
              },
              {
                "name": "AZURE_SUBSCRIPTION_ID",
                "value": "[subscription().subscriptionId]"
              },
              {
                "name": "AZURE_RESOURCE_GROUP_NAME",
                "value": "[variables('_resourceGroupName')]"
              },
              {
                "name": "AZURE_ORCHESTRATOR_FUNC_NAME",
                "value": "[variables('_orchestratorFunctionAppName')]"
              },
              {
                "name": "AZURE_KEY_VAULT_ENDPOINT",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.endpoint.value]"
              },
              {
                "name": "AZURE_KEY_VAULT_NAME",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
              },
              {
                "name": "STORAGE_ACCOUNT",
                "value": "[variables('_storageAccountName')]"
              },
              {
                "name": "LOGLEVEL",
                "value": "INFO"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "9615613606843442333"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "applicationInsightsResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "appServicePlanId": {
              "type": "string"
            },
            "runtimeName": {
              "type": "string",
              "allowedValues": [
                "dotnet",
                "dotnetcore",
                "dotnet-isolated",
                "node",
                "python",
                "java",
                "powershell",
                "custom"
              ]
            },
            "runtimeNameAndVersion": {
              "type": "string",
              "defaultValue": "[format('{0}|{1}', parameters('runtimeName'), parameters('runtimeVersion'))]"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "app,linux"
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "appCommandLine": {
              "type": "string",
              "defaultValue": ""
            },
            "appSettings": {
              "type": "array",
              "defaultValue": []
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "enableOryxBuild": {
              "type": "bool",
              "defaultValue": "[contains(parameters('kind'), 'linux')]"
            },
            "functionAppScaleLimit": {
              "type": "int",
              "defaultValue": -1
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "[parameters('runtimeNameAndVersion')]"
            },
            "minimumElasticInstanceCount": {
              "type": "int",
              "defaultValue": -1
            },
            "numberOfWorkers": {
              "type": "int",
              "defaultValue": -1
            },
            "scmDoBuildDuringDeployment": {
              "type": "bool",
              "defaultValue": false
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "defaultValue": false
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "FtpsOnly"
            },
            "healthCheckPath": {
              "type": "string",
              "defaultValue": ""
            },
            "basicPublishingCredentials": {
              "type": "bool",
              "defaultValue": false
            },
            "networkIsolation": {
              "type": "bool"
            },
            "vnetName": {
              "type": "string",
              "defaultValue": ""
            },
            "subnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "appServiceReuse": {
              "type": "bool"
            },
            "deployAppService": {
              "type": "bool",
              "defaultValue": true
            },
            "existingAppServiceNameResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[and(not(parameters('appServiceReuse')), parameters('deployAppService'))]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('name'), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "Verbose"
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "httpLogs": {
                  "fileSystem": {
                    "enabled": true,
                    "retentionInDays": 1,
                    "retentionInMb": 35
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(not(parameters('appServiceReuse')), parameters('deployAppService'))]",
              "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('name'), 'ftp')]",
              "properties": {
                "allow": "[parameters('basicPublishingCredentials')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(not(parameters('appServiceReuse')), parameters('deployAppService'))]",
              "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('name'), 'scm')]",
              "properties": {
                "allow": "[parameters('basicPublishingCredentials')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(not(parameters('appServiceReuse')), parameters('deployAppService'))]",
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "virtualNetworkSubnetId": "[if(parameters('networkIsolation'), parameters('subnetId'), null())]",
                "vnetRouteAllEnabled": true,
                "siteConfig": {
                  "vnetName": "[if(parameters('networkIsolation'), parameters('vnetName'), null())]",
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "1.2",
                  "appCommandLine": "[parameters('appCommandLine')]",
                  "numberOfWorkers": "[if(not(equals(parameters('numberOfWorkers'), -1)), parameters('numberOfWorkers'), null())]",
                  "minimumElasticInstanceCount": "[if(not(equals(parameters('minimumElasticInstanceCount'), -1)), parameters('minimumElasticInstanceCount'), null())]",
                  "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
                  "functionAppScaleLimit": "[if(not(equals(parameters('functionAppScaleLimit'), -1)), parameters('functionAppScaleLimit'), null())]",
                  "healthCheckPath": "[parameters('healthCheckPath')]",
                  "appSettings": "[concat(parameters('appSettings'), createArray(createObject('name', 'SCM_DO_BUILD_DURING_DEPLOYMENT', 'value', string(parameters('scmDoBuildDuringDeployment'))), createObject('name', 'ENABLE_ORYX_BUILD', 'value', string(parameters('enableOryxBuild'))), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('applicationInsightsResourceGroupName')), 'Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString)))]",
                  "cors": {
                    "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                  }
                },
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "httpsOnly": true
              },
              "identity": {
                "type": "SystemAssigned"
              }
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(not(parameters('deployAppService')), '', if(parameters('appServiceReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAppServiceNameResourceGroupName')), 'Microsoft.Web/sites', parameters('name')), '2022-09-01', 'full').identity.principalId, reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-09-01', 'full').identity.principalId))]"
            },
            "name": {
              "type": "string",
              "value": "[if(not(parameters('deployAppService')), '', if(parameters('appServiceReuse'), parameters('name'), parameters('name')))]"
            },
            "uri": {
              "type": "string",
              "value": "[if(not(parameters('deployAppService')), '', format('https://{0}', if(parameters('appServiceReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAppServiceNameResourceGroupName')), 'Microsoft.Web/sites', parameters('name')), '2022-09-01').defaultHostName, reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-09-01').defaultHostName)))]"
            },
            "id": {
              "type": "string",
              "value": "[if(not(parameters('deployAppService')), '', if(parameters('appServiceReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAppServiceNameResourceGroupName')), 'Microsoft.Web/sites', parameters('name')), resourceId('Microsoft.Web/sites', parameters('name'))))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "frontendPe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureFrontendPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.appServicesSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "sites"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'websites-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'websites-dnzones')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appservice-keyvault-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "9678702271087321593"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "add"
            },
            "keyVaultName": {
              "type": "string"
            },
            "permissions": {
              "type": "object",
              "defaultValue": {
                "secrets": [
                  "get",
                  "list",
                  "set",
                  "delete"
                ]
              }
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('principalId')]",
                    "tenantId": "[subscription().tenantId]",
                    "permissions": "[parameters('permissions')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appservice-blobstorage-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "13950754286200205310"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appservice-function-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionAppName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "14919424450640857557"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('functionAppName'))]",
              "name": "[guid(resourceId('Microsoft.Web/sites', parameters('functionAppName')), parameters('principalId'), 'Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'orchestrator')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appservice-ai-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "aiAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'AiServices'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11745691163955666414"
            }
          },
          "parameters": {
            "aiAccountName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', parameters('aiAccountName')), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'AiServices')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'frontend')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "dataIngestion",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "networkIsolation": {
            "value": "[variables('_networkIsolation')]"
          },
          "vnetName": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.name.value), createObject('value', ''))]",
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.appIntSubId.value), createObject('value', ''))]",
          "storageAccountName": {
            "value": "[format('{0}ing', variables('_storageAccountName'))]"
          },
          "appName": {
            "value": "[variables('_dataIngestionFunctionAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "functionAppReuse": {
            "value": "[variables('_azureReuseConfig').dataIngestionFunctionAppReuse]"
          },
          "existingFunctionAppResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingDataIngestionFunctionAppResourceGroupName]"
          },
          "functionAppStorageReuse": {
            "value": "[variables('_azureReuseConfig').dataIngestionFunctionAppStorageReuse]"
          },
          "existingFunctionAppStorageName": {
            "value": "[variables('_azureReuseConfig').existingDataIngestionFunctionAppStorageName]"
          },
          "existingFunctionAppStorageResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingDataIngestionFunctionAppStorageResourceGroupName]"
          },
          "appInsightsConnectionString": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appinsights'), '2022-09-01').outputs.connectionString.value]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appinsights'), '2022-09-01').outputs.instrumentationKey.value]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'dataIngest'))]"
          },
          "alwaysOn": {
            "value": true
          },
          "allowedOrigins": {
            "value": [
              "*"
            ]
          },
          "functionAppScaleLimit": {
            "value": 1
          },
          "minimumElasticInstanceCount": {
            "value": 1
          },
          "numberOfWorkers": {
            "value": 1
          },
          "runtimeName": {
            "value": "python"
          },
          "runtimeVersion": {
            "value": "[variables('_funcAppRuntimeVersion')]"
          },
          "appSettings": {
            "value": [
              {
                "name": "DOCINT_API_VERSION",
                "value": "[variables('_docintApiVersion')]"
              },
              {
                "name": "AZURE_KEY_VAULT_NAME",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
              },
              {
                "name": "FUNCTION_APP_NAME",
                "value": "[variables('_dataIngestionFunctionAppName')]"
              },
              {
                "name": "SEARCH_SERVICE",
                "value": "[variables('_searchServiceName')]"
              },
              {
                "name": "SEARCH_INDEX_NAME",
                "value": "[variables('_searchIndex')]"
              },
              {
                "name": "SEARCH_ANALYZER_NAME",
                "value": "[variables('_searchAnalyzerName')]"
              },
              {
                "name": "SEARCH_API_VERSION",
                "value": "[variables('_searchApiVersion')]"
              },
              {
                "name": "SEARCH_INDEX_INTERVAL",
                "value": "[variables('_searchIndexInterval')]"
              },
              {
                "name": "STORAGE_ACCOUNT_NAME",
                "value": "[variables('_storageAccountName')]"
              },
              {
                "name": "STORAGE_CONTAINER",
                "value": "[variables('_storageContainerName')]"
              },
              {
                "name": "STORAGE_CONTAINER_IMAGES",
                "value": "[variables('_storageImagesContainerName')]"
              },
              {
                "name": "AZURE_FORMREC_SERVICE",
                "value": "[variables('_aiServicesName')]"
              },
              {
                "name": "AZURE_OPENAI_API_VERSION",
                "value": "[variables('_openaiApiVersion')]"
              },
              {
                "name": "AZURE_SEARCH_APPROACH",
                "value": "[variables('_retrievalApproach')]"
              },
              {
                "name": "AZURE_OPENAI_SERVICE_NAME",
                "value": "[variables('_openAiServiceName')]"
              },
              {
                "name": "AZURE_OPENAI_EMBEDDING_DEPLOYMENT",
                "value": "[variables('_embeddingsDeploymentName')]"
              },
              {
                "name": "AZURE_OPENAI_CHATGPT_DEPLOYMENT",
                "value": "[variables('_chatGptDeploymentName')]"
              },
              {
                "name": "NUM_TOKENS",
                "value": "[variables('_chunkNumTokens')]"
              },
              {
                "name": "MIN_CHUNK_SIZE",
                "value": "[variables('_chunkMinSize')]"
              },
              {
                "name": "TOKEN_OVERLAP",
                "value": "[variables('_chunkTokenOverlap')]"
              },
              {
                "name": "NETWORK_ISOLATION",
                "value": "[variables('_networkIsolation')]"
              },
              {
                "name": "ENABLE_ORYX_BUILD",
                "value": "true"
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "true"
              },
              {
                "name": "AzureWebJobsFeatureFlags",
                "value": "EnableWorkerIndexing"
              },
              {
                "name": "LOGLEVEL",
                "value": "INFO"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17087624977064705334"
            }
          },
          "parameters": {
            "appName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "storageAccountName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "appSettings": {
              "type": "array"
            },
            "appInsightsConnectionString": {
              "type": "string"
            },
            "appInsightsInstrumentationKey": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "appCommandLine": {
              "type": "string",
              "defaultValue": ""
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "kind": {
              "type": "string",
              "defaultValue": "functionapp,linux"
            },
            "functionAppScaleLimit": {
              "type": "int",
              "defaultValue": -1
            },
            "minimumElasticInstanceCount": {
              "type": "int",
              "defaultValue": -1
            },
            "numberOfWorkers": {
              "type": "int",
              "defaultValue": -1
            },
            "runtimeName": {
              "type": "string"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "defaultValue": false
            },
            "healthCheckPath": {
              "type": "string",
              "defaultValue": ""
            },
            "networkIsolation": {
              "type": "bool"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "functionAppReuse": {
              "type": "bool"
            },
            "deployFunctionApp": {
              "type": "bool",
              "defaultValue": true
            },
            "existingFunctionAppResourceGroupName": {
              "type": "string"
            },
            "functionAppStorageReuse": {
              "type": "bool"
            },
            "existingFunctionAppStorageName": {
              "type": "string"
            },
            "existingFunctionAppStorageResourceGroupName": {
              "type": "string"
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "runtime": {
              "type": "string",
              "defaultValue": "python",
              "allowedValues": [
                "python"
              ],
              "metadata": {
                "description": "The language worker runtime to load in the function app."
              }
            }
          },
          "variables": {
            "runtimeNameAndVersion": "[format('{0}|{1}', parameters('runtimeName'), parameters('runtimeVersion'))]",
            "functionAppName": "[parameters('appName')]",
            "functionWorkerRuntime": "[parameters('runtime')]",
            "_storageAccountName": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppStorageReuse'), parameters('existingFunctionAppStorageName'), parameters('storageAccountName')))]"
          },
          "resources": [
            {
              "condition": "[and(not(parameters('functionAppStorageReuse')), parameters('deployFunctionApp'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "Storage",
              "properties": {
                "allowBlobPublicAccess": false,
                "supportsHttpsTrafficOnly": true,
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": true
              }
            },
            {
              "condition": "[and(not(parameters('functionAppReuse')), parameters('deployFunctionApp'))]",
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-09-01",
              "name": "[variables('functionAppName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "virtualNetworkSubnetId": "[if(parameters('networkIsolation'), parameters('subnetId'), null())]",
                "httpsOnly": true,
                "siteConfig": {
                  "vnetName": "[if(parameters('networkIsolation'), parameters('vnetName'), null())]",
                  "linuxFxVersion": "[variables('runtimeNameAndVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "FtpsOnly",
                  "minTlsVersion": "1.2",
                  "appCommandLine": "[parameters('appCommandLine')]",
                  "numberOfWorkers": "[parameters('numberOfWorkers')]",
                  "minimumElasticInstanceCount": "[parameters('minimumElasticInstanceCount')]",
                  "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
                  "functionAppScaleLimit": "[parameters('functionAppScaleLimit')]",
                  "healthCheckPath": "[parameters('healthCheckPath')]",
                  "appSettings": "[concat(parameters('appSettings'), createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('_storageAccountName'), environment().suffixes.storage, if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppStorageReuse'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('existingFunctionAppStorageName')), '2022-05-01').keys[0].value, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-05-01').keys[0].value)))), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', parameters('appInsightsConnectionString')), createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', parameters('appInsightsInstrumentationKey')), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', variables('functionWorkerRuntime')), createObject('name', 'AZURE_KEY_VAULT_ENDPOINT', 'value', reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri)))]",
                  "cors": {
                    "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').identity.principalId, reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').identity.principalId))]"
            },
            "name": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), variables('functionAppName'), variables('functionAppName')))]"
            },
            "uri": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', format('https://{0}', if(parameters('functionAppReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), '2022-09-01').defaultHostName, reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01').defaultHostName)))]"
            },
            "location": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').location, reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01', 'full').location))]"
            },
            "id": {
              "type": "string",
              "value": "[if(not(parameters('deployFunctionApp')), '', if(parameters('functionAppReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingFunctionAppResourceGroupName')), 'Microsoft.Web/sites', variables('functionAppName')), resourceId('Microsoft.Web/sites', variables('functionAppName'))))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appinsights')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "data-ingestion-keyvault-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "9678702271087321593"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "add"
            },
            "keyVaultName": {
              "type": "string"
            },
            "permissions": {
              "type": "object",
              "defaultValue": {
                "secrets": [
                  "get",
                  "list",
                  "set",
                  "delete"
                ]
              }
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('principalId')]",
                    "tenantId": "[subscription().tenantId]",
                    "permissions": "[parameters('permissions')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "data-ingestion-blobstorage-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "12446832419276223834"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "dataingestion-openai-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "openaiAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "818130939760042958"
            }
          },
          "parameters": {
            "openaiAccountName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openaiAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiAccountName')), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "dataingestion-ai-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "aiAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'AiServices'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "11745691163955666414"
            }
          },
          "parameters": {
            "aiAccountName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiAccountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', parameters('aiAccountName')), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'AiServices')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ingestionPe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureDataIngestionPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.appServicesSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "sites"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'websites-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'dataIngestion')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'websites-dnzones')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "AiServices",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_aiServicesName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "aiServicesDeploy": {
            "value": true
          },
          "aiServicesReuse": {
            "value": "[variables('_azureReuseConfig').aiServicesReuse]"
          },
          "existingAiServicesResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingAiServicesResourceGroupName]"
          },
          "publicNetworkAccess": "[if(variables('_networkIsolation'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "kind": {
            "value": "CognitiveServices"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "S0"
            }
          },
          "secretsNames": {
            "value": {
              "secretName01": "formRecKey",
              "secretName02": "speechKey"
            }
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17570925468728817062"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "aiServicesReuse": {
              "type": "bool"
            },
            "existingAiServicesResourceGroupName": {
              "type": "string"
            },
            "aiServicesDeploy": {
              "type": "bool",
              "defaultValue": true
            },
            "secretsNames": {
              "type": "object",
              "defaultValue": {}
            },
            "keyVaultName": {
              "type": "string"
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "[parameters('name')]"
            },
            "deployments": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            }
          },
          "resources": [
            {
              "condition": "[and(not(parameters('aiServicesReuse')), parameters('aiServicesDeploy'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              },
              "sku": "[parameters('sku')]"
            },
            {
              "copy": {
                "name": "deployment",
                "count": "[length(parameters('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(not(parameters('aiServicesReuse')), parameters('aiServicesDeploy'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
              "properties": {
                "model": "[parameters('deployments')[copyIndex()].model]",
                "raiPolicyName": "[if(contains(parameters('deployments')[copyIndex()], 'raiPolicyName'), parameters('deployments')[copyIndex()].raiPolicyName, null())]"
              },
              "sku": "[if(contains(parameters('deployments')[copyIndex()], 'sku'), parameters('deployments')[copyIndex()].sku, createObject('name', 'Standard', 'capacity', 40))]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVaultSecret",
                "count": "[length(items(parameters('secretsNames')))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), items(parameters('secretsNames'))[copyIndex()].value)]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": true,
                  "exp": 0,
                  "nbf": 0
                },
                "contentType": "string",
                "value": "[if(parameters('aiServicesReuse'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAiServicesResourceGroupName')), 'Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1, listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[if(not(parameters('aiServicesDeploy')), '', if(parameters('aiServicesReuse'), parameters('name'), parameters('name')))]"
            },
            "id": {
              "type": "string",
              "value": "[if(not(parameters('aiServicesDeploy')), '', if(parameters('aiServicesReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAiServicesResourceGroupName')), 'Microsoft.CognitiveServices/accounts', parameters('name')), resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(not(parameters('aiServicesDeploy')), '', if(parameters('aiServicesReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAiServicesResourceGroupName')), 'Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aiServicesPe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureAiServicesPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.aiSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'AiServices'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "account"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'aiservices-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'AiServices')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'aiservices-dnzones')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_openAiServiceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "aiServicesReuse": {
            "value": "[variables('_azureReuseConfig').aoaiReuse]"
          },
          "existingAiServicesResourceGroupName": {
            "value": "[variables('_azureReuseConfig').existingAoaiResourceGroupName]"
          },
          "publicNetworkAccess": "[if(variables('_networkIsolation'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "S0"
            }
          },
          "secretsNames": {
            "value": {
              "secretName01": "azureOpenAIKey"
            }
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "deployments": {
            "value": [
              {
                "name": "[variables('_chatGptDeploymentName')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('_chatGptModelName')]",
                  "version": "[variables('_chatGptModelVersion')]"
                },
                "sku": {
                  "name": "[variables('_chatGptModelDeploymentType')]",
                  "capacity": "[variables('_chatGptDeploymentCapacity')]"
                }
              },
              {
                "name": "[variables('_embeddingsDeploymentName')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('_embeddingsModelName')]",
                  "version": "[variables('_embeddingsModelVersion')]"
                },
                "sku": {
                  "name": "Standard",
                  "capacity": "[variables('_embeddingsDeploymentCapacity')]"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "17570925468728817062"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "aiServicesReuse": {
              "type": "bool"
            },
            "existingAiServicesResourceGroupName": {
              "type": "string"
            },
            "aiServicesDeploy": {
              "type": "bool",
              "defaultValue": true
            },
            "secretsNames": {
              "type": "object",
              "defaultValue": {}
            },
            "keyVaultName": {
              "type": "string"
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "[parameters('name')]"
            },
            "deployments": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            }
          },
          "resources": [
            {
              "condition": "[and(not(parameters('aiServicesReuse')), parameters('aiServicesDeploy'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              },
              "sku": "[parameters('sku')]"
            },
            {
              "copy": {
                "name": "deployment",
                "count": "[length(parameters('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(not(parameters('aiServicesReuse')), parameters('aiServicesDeploy'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
              "properties": {
                "model": "[parameters('deployments')[copyIndex()].model]",
                "raiPolicyName": "[if(contains(parameters('deployments')[copyIndex()], 'raiPolicyName'), parameters('deployments')[copyIndex()].raiPolicyName, null())]"
              },
              "sku": "[if(contains(parameters('deployments')[copyIndex()], 'sku'), parameters('deployments')[copyIndex()].sku, createObject('name', 'Standard', 'capacity', 40))]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVaultSecret",
                "count": "[length(items(parameters('secretsNames')))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), items(parameters('secretsNames'))[copyIndex()].value)]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": true,
                  "exp": 0,
                  "nbf": 0
                },
                "contentType": "string",
                "value": "[if(parameters('aiServicesReuse'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAiServicesResourceGroupName')), 'Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1, listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[if(not(parameters('aiServicesDeploy')), '', if(parameters('aiServicesReuse'), parameters('name'), parameters('name')))]"
            },
            "id": {
              "type": "string",
              "value": "[if(not(parameters('aiServicesDeploy')), '', if(parameters('aiServicesReuse'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAiServicesResourceGroupName')), 'Microsoft.CognitiveServices/accounts', parameters('name')), resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(not(parameters('aiServicesDeploy')), '', if(parameters('aiServicesReuse'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingAiServicesResourceGroupName')), 'Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(variables('_networkIsolation'), not(variables('_vnetReuse')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openAiPe",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('_azureOpenAiPe')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network'), '2022-09-01').outputs.aiSubId.value), createObject('value', ''))]",
          "serviceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.id.value]"
          },
          "groupIds": {
            "value": [
              "account"
            ]
          },
          "dnsZoneId": "[if(variables('_networkIsolation'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai-dnzones'), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "4939796493455065421"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "groupIds": {
              "type": "array",
              "defaultValue": []
            },
            "dnsZoneId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "privatelinkServiceonnection",
                    "properties": {
                      "privateLinkServiceId": "[parameters('serviceId')]",
                      "groupIds": "[parameters('groupIds')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-group', parameters('name')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "config1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('dnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'openai-dnzones')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[variables('_provisionLoadTesting')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('_loadtestingName')]",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_loadtestingName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "16735387875578568314"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.LoadTestService/loadTests",
              "apiVersion": "2022-12-01",
              "name": "[parameters('name')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.LoadTestService/loadTests', parameters('name')), '2022-12-01', 'full').identity.principalId]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    },
    {
      "condition": "[variables('_provisionLoadTesting')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "loadtesting-keyvault-access",
      "resourceGroup": "[variables('_resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "principalId": "[if(variables('_provisionLoadTesting'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', variables('_loadtestingName')), '2022-09-01').outputs.id.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "9678702271087321593"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "add"
            },
            "keyVaultName": {
              "type": "string"
            },
            "permissions": {
              "type": "object",
              "defaultValue": {
                "secrets": [
                  "get",
                  "list",
                  "set",
                  "delete"
                ]
              }
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('principalId')]",
                    "tenantId": "[subscription().tenantId]",
                    "permissions": "[parameters('permissions')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('_resourceGroupName')), 'Microsoft.Resources/deployments', variables('_loadtestingName'))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('_resourceGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_AI_SUBNET_NAME": {
      "type": "string",
      "value": "[variables('_aiSubnetName')]"
    },
    "AZURE_AI_SUBNET_PREFIX": {
      "type": "string",
      "value": "[variables('_aiSubnetPrefix')]"
    },
    "AZURE_APP_INSIGHTS_NAME": {
      "type": "string",
      "value": "[variables('_appInsightsName')]"
    },
    "AZURE_APP_INT_SUBNET_NAME": {
      "type": "string",
      "value": "[variables('_appIntSubnetName')]"
    },
    "AZURE_APP_INT_SUBNET_PREFIX": {
      "type": "string",
      "value": "[variables('_appIntSubnetPrefix')]"
    },
    "AZURE_APP_SERVICE_NAME": {
      "type": "string",
      "value": "[variables('_appServiceName')]"
    },
    "AZURE_APP_SERVICE_PLAN_NAME": {
      "type": "string",
      "value": "[variables('_appServicePlanName')]"
    },
    "AZURE_APP_SERVICES_SUBNET_NAME": {
      "type": "string",
      "value": "[variables('_appServicesSubnetName')]"
    },
    "AZURE_APP_SERVICES_SUBNET_PREFIX": {
      "type": "string",
      "value": "[variables('_appServicesSubnetPrefix')]"
    },
    "AZURE_BASTION_KV_NAME": {
      "type": "string",
      "value": "[variables('_bastionKvName')]"
    },
    "AZURE_BASTION_SUBNET_NAME": {
      "type": "string",
      "value": "[variables('_bastionSubnetName')]"
    },
    "AZURE_BASTION_SUBNET_PREFIX": {
      "type": "string",
      "value": "[variables('_bastionSubnetPrefix')]"
    },
    "AZURE_CHAT_GPT_DEPLOYMENT_CAPACITY": {
      "type": "int",
      "value": "[variables('_chatGptDeploymentCapacity')]"
    },
    "AZURE_CHAT_GPT_DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[variables('_chatGptDeploymentName')]"
    },
    "AZURE_CHAT_GPT_MODEL_NAME": {
      "type": "string",
      "value": "[variables('_chatGptModelName')]"
    },
    "AZURE_CHAT_GPT_MODEL_VERSION": {
      "type": "string",
      "value": "[variables('_chatGptModelVersion')]"
    },
    "AZURE_AI_SERVICES_NAME": {
      "type": "string",
      "value": "[variables('_aiServicesName')]"
    },
    "AZURE_AI_SERVICES_PE": {
      "type": "string",
      "value": "[variables('_azureAiServicesPe')]"
    },
    "AZURE_DB_ACCOUNT_PE": {
      "type": "string",
      "value": "[variables('_azureDbAccountPe')]"
    },
    "AZURE_DATA_INGEST_FUNC_NAME": {
      "type": "string",
      "value": "[variables('_dataIngestionFunctionAppName')]"
    },
    "AZURE_DATA_INGEST_FUNC_RG": {
      "type": "string",
      "value": "[variables('_resourceGroupName')]"
    },
    "AZURE_DATA_INGESTION_PE": {
      "type": "string",
      "value": "[variables('_azureDataIngestionPe')]"
    },
    "AZURE_DATABASE_SUBNET_NAME": {
      "type": "string",
      "value": "[variables('_databaseSubnetName')]"
    },
    "AZURE_DATABASE_SUBNET_PREFIX": {
      "type": "string",
      "value": "[variables('_databaseSubnetPrefix')]"
    },
    "AZURE_DB_CONFIG": {
      "type": "object",
      "value": "[parameters('azureDbConfig')]"
    },
    "AZURE_FRONTEND_PE": {
      "type": "string",
      "value": "[variables('_azureFrontendPe')]"
    },
    "AZURE_KV_NAME": {
      "type": "string",
      "value": "[variables('_keyVaultName')]"
    },
    "AZURE_KEY_VAULT_NAME": {
      "type": "string",
      "value": "[variables('_keyVaultName')]"
    },
    "AZURE_KEYVAULT_PE": {
      "type": "string",
      "value": "[variables('_azureKeyvaultPe')]"
    },
    "AZURE_LOAD_TESTING_NAME": {
      "type": "string",
      "value": "[variables('_loadtestingName')]"
    },
    "AZURE_NETWORK_ISOLATION": {
      "type": "bool",
      "value": "[variables('_networkIsolation')]"
    },
    "AZURE_OPEN_AI_PE": {
      "type": "string",
      "value": "[variables('_azureOpenAiPe')]"
    },
    "AZURE_OPENAI_SERVICE_NAME": {
      "type": "string",
      "value": "[variables('_openAiServiceName')]"
    },
    "AZURE_ORCHESTRATOR_FUNC_NAME": {
      "type": "string",
      "value": "[variables('_orchestratorFunctionAppName')]"
    },
    "AZURE_ORCHESTRATOR_FUNC_RG": {
      "type": "string",
      "value": "[variables('_resourceGroupName')]"
    },
    "AZURE_ORCHESTRATOR_MESSAGES_LANGUAGE": {
      "type": "string",
      "value": "[variables('_orchestratorMessagesLanguage')]"
    },
    "AZURE_ORCHESTRATOR_PE": {
      "type": "string",
      "value": "[variables('_azureOrchestratorPe')]"
    },
    "AZURE_RESOURCE_GROUP_NAME": {
      "type": "string",
      "value": "[variables('_resourceGroupName')]"
    },
    "AZURE_RETRIEVAL_APPROACH": {
      "type": "string",
      "value": "[variables('_retrievalApproach')]"
    },
    "AZURE_REUSE_CONFIG": {
      "type": "object",
      "value": "[parameters('azureReuseConfig')]"
    },
    "AZURE_SEARCH_ANALYZER_NAME": {
      "type": "string",
      "value": "[variables('_searchAnalyzerName')]"
    },
    "AZURE_SEARCH_INDEX": {
      "type": "string",
      "value": "[variables('_searchIndex')]"
    },
    "AZURE_SEARCH_PE": {
      "type": "string",
      "value": "[variables('_azureSearchPe')]"
    },
    "AZURE_SEARCH_SERVICE_NAME": {
      "type": "string",
      "value": "[variables('_searchServiceName')]"
    },
    "AZURE_SPEECH_RECOGNITION_LANGUAGE": {
      "type": "string",
      "value": "[variables('_speechRecognitionLanguage')]"
    },
    "AZURE_SPEECH_SYNTHESIS_LANGUAGE": {
      "type": "string",
      "value": "[variables('_speechSynthesisLanguage')]"
    },
    "AZURE_SPEECH_SYNTHESIS_VOICE_NAME": {
      "type": "string",
      "value": "[variables('_speechSynthesisVoiceName')]"
    },
    "AZURE_STORAGE_ACCOUNT_PE": {
      "type": "string",
      "value": "[variables('_azureStorageAccountPe')]"
    },
    "AZURE_STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "value": "[variables('_storageAccountName')]"
    },
    "AZURE_STORAGE_CONTAINER_NAME": {
      "type": "string",
      "value": "[variables('_storageContainerName')]"
    },
    "AZURE_SUBSCRIPTION_ID": {
      "type": "string",
      "value": "[subscription().subscriptionId]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_USE_SEMANTIC_RERANKING": {
      "type": "bool",
      "value": "[variables('_useSemanticReranking')]"
    },
    "AZURE_VM_DEPLOY_VM": {
      "type": "bool",
      "value": "[variables('_deployVM')]"
    },
    "AZURE_VM_KV_NAME": {
      "type": "string",
      "value": "[variables('_keyVaultName')]"
    },
    "AZURE_VM_KV_SEC_NAME": {
      "type": "string",
      "value": "[if(variables('_networkIsolation'), variables('_vmKeyVaultSecName'), '')]"
    },
    "AZURE_VM_NAME": {
      "type": "string",
      "value": "[if(variables('_networkIsolation'), variables('_ztVmName'), '')]"
    },
    "AZURE_VM_USER_NAME": {
      "type": "string",
      "value": "[if(variables('_networkIsolation'), variables('_vmUserName'), '')]"
    },
    "AZURE_VNET_ADDRESS": {
      "type": "string",
      "value": "[variables('_vnetAddress')]"
    },
    "AZURE_VNET_NAME": {
      "type": "string",
      "value": "[variables('_vnetName')]"
    },
    "AZURE_ZERO_TRUST": {
      "type": "string",
      "value": "[if(variables('_networkIsolation'), 'TRUE', 'FALSE')]"
    },
    "AZURE_SEARCH_USE_MIS": {
      "type": "bool",
      "value": "[variables('_azureSearchUseMIS')]"
    },
    "AZURE_SEARCH_TRIMMING": {
      "type": "bool",
      "value": "[variables('_searchTrimming')]"
    }
  }
}